/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import static java.lang.Integer.parseInt;

import java.util.Arrays;
import java.util.List;

import org.agrona.ErrorHandler;
import org.agrona.concurrent.ShutdownSignalBarrier;

import io.aeron.cluster.service.ClusteredServiceContainer;

public class Container {
        private static ErrorHandler errorHandler(final String context) {
                return (Throwable throwable) -> {
                        System.err.println(context);
                        throwable.printStackTrace(System.err);
                };
        }

        private static final int PORT_BASE = 9000;

        public static void main(String[] args) {
                final int nodeId = parseInt(System.getProperty("aeron.cluster.member.id"));
                final String hostnamesStr = "localhost,localhost,localhost";
                final List<String> hostnames = Arrays.asList(hostnamesStr.split(","));
                final String logDir = System.getProperty("heartbeat.log.dir");

                final ShutdownSignalBarrier barrier = new ShutdownSignalBarrier();

                final ClusterConfig clusterConfig = ClusterConfig.create(
                                nodeId, hostnames, hostnames, PORT_BASE,
                                new HeartbeatService(0, nodeId, logDir),
                                new HeartbeatService(1, nodeId, logDir),
                                new HeartbeatService(2, nodeId, logDir));

                // Set error handlers
                clusterConfig.mediaDriverContext().errorHandler(Container.errorHandler("Media Driver"));
                clusterConfig.archiveContext()
                                .errorHandler(Container.errorHandler("Archive"));
                clusterConfig.aeronArchiveContext()
                                .errorHandler(Container.errorHandler("Aeron Archive"));
                clusterConfig.clusteredServiceContext()
                                .errorHandler(errorHandler("Clustered Service"));

                List<ClusteredServiceContainer.Context> contexts = clusterConfig.clusteredServiceContexts();
                try (
                                ClusteredServiceContainer service0 = ClusteredServiceContainer.launch(contexts.get(0));
                                ClusteredServiceContainer service1 = ClusteredServiceContainer.launch(contexts.get(1));
                                ClusteredServiceContainer service2 = ClusteredServiceContainer
                                                .launch(contexts.get(2))) {
                        System.out.println("[" + nodeId + "] Started Cluster Node on " + hostnames.get(nodeId)
                                        + " with 3 services...");
                        barrier.await();
                        System.out.println("[" + nodeId + "] Exiting");
                }
        }
}
